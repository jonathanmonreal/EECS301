// Authors: Jonathan Monreal (jem177) and Jiawei Wu (jxw585)

// The top-level Verilog file for eecs301_lab1
// This code was initially generated by Terasic System Builder

module eecs301_lab1(

         //////////// ADC //////////
         output ADC_CONVST,
         output ADC_DIN,
         input ADC_DOUT,
         output ADC_SCLK,

         //////////// CLOCK //////////
         input CLOCK_50,
         input CLOCK2_50,
         input CLOCK3_50,
         input CLOCK4_50,

         //////////// SEG7 //////////
         output [ 6: 0 ] HEX0,
         output [ 6: 0 ] HEX1,
         output [ 6: 0 ] HEX2,
         output [ 6: 0 ] HEX3,
         output [ 6: 0 ] HEX4,
         output [ 6: 0 ] HEX5,

         //////////// KEY //////////
         input [ 3: 0 ] KEY,

         //////////// LED //////////
         output [ 9: 0 ] LEDR,

         //////////// SW //////////
         input [ 9: 0 ] SW,

         //////////// VGA //////////
         output [ 7: 0 ] VGA_B,
         output VGA_BLANK_N,
         output VGA_CLK,
         output [ 7: 0 ] VGA_G,
         output VGA_HS,
         output [ 7: 0 ] VGA_R,
         output VGA_SYNC_N,
         output VGA_VS,

         //////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
         inout [ 35: 0 ] GPIO_0,

         //////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
         inout [ 35: 0 ] GPIO_1
       );

//=======================================================
//  REG/WIRE declarations
//=======================================================

//Clock and error
wire c,err;
//final light signals and signals from turn module
wire [2:0] llights,rlights,tl,tr;
//center lights signal from brake
wire [1:0] clights;
//dummy var for 10 switches
wire [9:0] switches;
//dummy var for 4 buttons
wire [3:0] buttons;


//=======================================================
//  Structural coding
//=======================================================



//I/O mappings
assign LEDR[9:7] = llights;
assign LEDR[2:0] = rlights;
assign LEDR[5:4] = clights;
assign switches = SW;
assign buttons = ~KEY;


assign HEX0 [3]= c;

assign {HEX2[0],HEX2[3],HEX2[4],HEX2[5],HEX2[6]} 
= {~err,~err,~err,~err,~err,~err};

assign {HEX0[6:4],HEX0[2:0]}= ~6'b0;
assign HEX1= ~7'b0;
assign {HEX2[1],HEX2[2]}= ~2'b0;
assign HEX3= ~7'b0;
assign HEX4= ~7'b0;
assign HEX5= ~7'b0;



counter count(
          .clk( CLOCK_50 ),
          .counter_msb( c )
        );
  
turn insig(
	.clock(c),
	.left(switches[1]),
	.right(switches[0]),
	.l_signal(tl), .r_signal(tr), .error(err)

);

brake braking(.clock(c), 
.brake(buttons[2]), 
.l_signal(tl), 
.r_signal(tr), 
.l_lights(llights), 
.r_lights(rlights), 
.c_lights(clights)

);

endmodule
